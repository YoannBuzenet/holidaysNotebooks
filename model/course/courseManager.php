<?php 

include('model/course/Course.php');

class CourseManager{


public static function getAllCourses($pdo){

	$sql = "SELECT (SELECT COUNT(id_question) FROM course_questions WHERE id_course=c.id) as total_questions, c.id, c.name, c.id_school_level, sl.school_level as slname, sl.general_level, c.url_picture
			FROM courses c
			INNER JOIN school_levels sl ON c.id_school_level = sl.id
			ORDER BY sl.general_level";

	$pdoStatement = $pdo->prepare($sql);
	$pdoStatement->execute();

	return $pdoStatement->fetchAll();
}

public static function registerCourse(PDO $pdo, array $post, $file){

	//Here we :
	// 1 - Save the picture on server
	// 2 - Create the course on DB
	// 3 - Get the ID of this new course (generated by auto-increment on DBSM)
	// 4 - Register in the table course-question the link between a course and each of its questions, with the ID generated line above

	//////////////////////////////////
	// 1 - Saving the picture
	//////////////////////////////////
	$target_dir = "public/pictures/courses/";
	$target_file = $target_dir . basename($file["name"]);
	$uploadOk = 1;
	$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
	// if everything is ok, try to upload file
	move_uploaded_file($_FILES["course-picture"]["tmp_name"], $target_file); 

	//////////////////////////////////
	// 2 - Creating the course
	//////////////////////////////////

	$course_name = $_POST['course-name'];
	$course_level = $_POST['course-level'];

	$sql = "INSERT INTO courses(name, id_school_level, url_picture) VALUES (?,?,?)";

	$pdoStatement = $pdo->prepare($sql);

	$pdoStatement->bindParam(1, $course_name, PDO::PARAM_STR);
	$pdoStatement->bindParam(2, $course_level, PDO::PARAM_INT);
	$pdoStatement->bindParam(3, $target_file, PDO::PARAM_STR);
	$pdoStatement->execute();

	//////////////////////////////////
	//3 - Get the most recent course and take its id - it's our new one just generated
	//////////////////////////////////

	$sql = "SELECT * FROM courses ORDER BY id DESC LIMIT 1";

	$pdoStatement = $pdo->prepare($sql);
	$pdoStatement->execute();
	$result = $pdoStatement->fetch();

	$id = $result['id'];
	$id = intval($id);


	// Preparing step 4
	// We browse the $_POST to extract the key/value of each question chosen (their order and their id).
	// With that data we will be able to link a course and each question in it, and in which order.
	// We can register everything in DB after that last data filtering
	$questions_orders = array();
	
	foreach ($post as $key => $value) {
		if(preg_match('#^order#', $key)){
			$order_question = intval($value);
			$order_found = true;
		}

		if(preg_match('#^question#', $key)){
			$id_question = intval($value);
			$question_found = true;
		}
		if(isset($order_found) && $order_found && isset($question_found) && $question_found){
			$questions_orders[$order_question] = $id_question;
			$order_found = false;
			$question_found = false;
		}
	}


	//////////////////////////////////
	// 4 - Inserting the link bewteen a course and each of its questions
	//////////////////////////////////

	foreach ($questions_orders as $order => $question) {
		$sql = "INSERT INTO course_questions(order_question, id_question, id_course) VALUES (?,?,?)";

		$pdoStatement = $pdo->prepare($sql);

		$pdoStatement->bindParam(1, $order, PDO::PARAM_INT);
		$pdoStatement->bindParam(2, $question, PDO::PARAM_INT);
		$pdoStatement->bindParam(3, $id, PDO::PARAM_INT);
		$pdoStatement->execute();
	}


}
//Get the basic information about a course (id, name, url picture, school level)
public static function findCourseById(PDO $pdo, int $id){

	$sql = "SELECT (SELECT COUNT(id_question) FROM course_questions WHERE id_course=c.id) as total_questions, c.id, c.name, c.id_school_level, c.url_picture, sl.school_level, sl.general_level 
			FROM courses c
			INNER JOIN school_levels sl ON c.id_school_level = sl.id
			WHERE c.id=?";

	$pdoStatement = $pdo->prepare($sql);

	$pdoStatement->bindParam(1, $id, PDO::PARAM_INT);
	$pdoStatement->execute();
	$pdoStatement->setFetchMode(PDO::FETCH_CLASS, "Course");

	return $pdoStatement->fetch();


}

//Get some datas about all questions in a course
public static function getCourseQuestionsData(PDO $pdo, int $course_id){
	
	$sql = "SELECT q.id, qtr.name, d.id, d.discipline, sl.id, sl.school_level, cq.order_question, c.name
			FROM courses c
			INNER JOIN course_questions cq ON c.id = cq.id_course
			INNER JOIN questions q ON cq.id_question = q.id
			INNER JOIN questions_type_radio qtr ON q.id = qtr.global_id
			INNER JOIN school_levels sl ON qtr.id_school_level = sl.id
			INNER JOIN disciplines d ON qtr.id_discipline = d.id
			WHERE c.id=?";

	$pdoStatement = $pdo->prepare($sql);

	$pdoStatement->bindParam(1, $course_id, PDO::PARAM_INT);
	$pdoStatement->execute();

	return $pdoStatement->fetchAll();		

}	

public static function deleteCourseQuestions(PDO $pdo, int $id_course){

	$sql= "DELETE FROM course_questions WHERE id_course = ?";

	$pdoStatement = $pdo->prepare($sql);

	$pdoStatement->bindParam(1, $id_course, PDO::PARAM_INT);
	$pdoStatement->execute();

	return $pdoStatement->rowCount();

}

public static function updateCourse(PDO $pdo, array $post_datas){
	//This function updates global course table and delete old question-course records, then insert new ones
	// 1 - Updating main course table
	// 2 - Deleting all courses-question for this course
	// 3 - Inserting the new ones for this course

	//////////////////////////////////
	// 1 - Updating main course table
	//////////////////////////////////

	$name_course = $post_datas['course-name'];
	$id_school_level = $post_datas['course-level'];
	$id_course = $post_datas['id'];

	$sql = "UPDATE courses SET name = ?, id_school_level = ? WHERE id=?";

	$pdoStatement = $pdo->prepare($sql);

	$pdoStatement->bindParam(1, $name_course, PDO::PARAM_STR);
	$pdoStatement->bindParam(2, $id_school_level, PDO::PARAM_INT);
	$pdoStatement->bindParam(3, $id_course, PDO::PARAM_INT);
	$pdoStatement->execute();

	//would be good to check here if it succeeded (rowCount() ), if not throw an error

	//////////////////////////////////
	// 2 - Deleting all courses-question for this course
	//////////////////////////////////

	courseManager::deleteCourseQuestions($pdo, $id_course);

	//would be good to check here if it succeeded (rowCount() ), if not throw an error

	//////////////////////////////////
	// 3 - Inserting the new ones for this course
	//////////////////////////////////

	foreach ($post_datas as $key => $value) {
		if(preg_match('#^order#', $key)){
			$order_question = intval($value);
			$order_found = true;
		}

		if(preg_match('#^question#', $key)){
			$id_question = intval($value);
			$question_found = true;
		}
		if(isset($order_found) && $order_found && isset($question_found) && $question_found){
			$questions_orders[$order_question] = $id_question;
			$order_found = false;
			$question_found = false;
		}
	}

	foreach ($questions_orders as $order => $question) {
		$sql = "INSERT INTO course_questions(order_question, id_question, id_course) VALUES (?,?,?)";

		$pdoStatement = $pdo->prepare($sql);

		$pdoStatement->bindParam(1, $order, PDO::PARAM_INT);
		$pdoStatement->bindParam(2, $question, PDO::PARAM_INT);
		$pdoStatement->bindParam(3, $id_course, PDO::PARAM_INT);
		$pdoStatement->execute();
	}

}

public static function updatePictureCourse(PDO $pdo, int $course_id, array $file){

	//////////////////////////////////
	// 1 - Saving the picture
	//////////////////////////////////

	$target_dir = "public/pictures/courses/";
	$target_file = $target_dir . basename($file["name"]);
	$uploadOk = 1;
	$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
	// if everything is ok, try to upload file
	move_uploaded_file($_FILES["course-picture"]["tmp_name"], $target_file); 

	//////////////////////////////////
	// 2 - Updating the link in DB
	//////////////////////////////////

	$sql = "UPDATE courses SET url_picture = ? WHERE id=?";

	$pdoStatement = $pdo->prepare($sql);
	$pdoStatement->bindParam(1, $target_file, PDO::PARAM_STR);
	$pdoStatement->bindParam(2, $course_id, PDO::PARAM_INT);
	$pdoStatement->execute();


}

public static function calculateSuccessRateOnCourse(PDO $pdo, User $user, int $id_course){

		$course = courseManager::findCourseById($pdo, $id_course);
		$total_questions = $course->total_questions;

		$user_id = $user->getId();

		$sql = "SELECT SUM(result) as total_score FROM result_per_question_per_user WHERE id_user = ? AND id_course = ?";
		$pdoStatement = $pdo->prepare($sql);
		$pdoStatement->bindParam(1, $user_id, PDO::PARAM_INT);
		$pdoStatement->bindParam(2, $id_course, PDO::PARAM_INT);
		$pdoStatement->execute();

		$result = $pdoStatement->fetch();

		return round($result['total_score']/$total_questions*100);


}

}
?>